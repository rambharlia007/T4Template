<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using RuntimeDemo;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RuntimeDemo
{

public static class Extensions
{
    public static bool In<T>(this T obj, params T[] list)
    {
        return list.Contains(obj);
    }
} 

public partial class RuleInputData 
{
    <# foreach (var data in InputProperties)   
   { #>  
   public <#= data.Value #> <#= data.Key #> {get;set;}
<# }  #>

   public void SetInputData(Dictionary<string,string> inputData){
	  <#  foreach(var data in InputProperties){ #>
		  if(inputData.ContainsKey("<#=data.Key#>")){

			
		<# } #>
   }

}

public partial class RuleOutputData {

    <# foreach (var data in OutputProperties)   
   { #>  
   public <#= data.Value #> <#= data.Key #> {get;set;}
<# }  #>
}

public class CalculationRule : IRule {
  public RuleOutputData ruleOutputData = new RuleOutputData();
   public RuleInputData ruleInputData = new RuleInputData();
   public dynamic ComputeRule(Dictionary<string,string> inputData){
    ruleInputData.SetInputData(inputData);
	var res = new RuleOutputData(); 
         <#=  RuleDefination	#>
		 return res;
   }
}
}