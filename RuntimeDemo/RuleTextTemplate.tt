<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ContentManagetCalculationRule{

public class RuleInputData {
    <# foreach (var data in InputProperties)   
   { #>  
   public <#= data.Value #> <#= data.Key #> {get;set;}
<# }  #>
}

public class RuleOutputData {
    <# foreach (var data in OutputProperties)   
   { #>  
   public <#= data.Value #> <#= data.Key #> {get;set;}
<# }  #>
}

public class CalculationRule {
 
   List<RuleOutputData> outputData = new  List<RuleOutputData>();

   <# 
     var finalInputRuleData = new List<string>();
	 foreach(var csvInputValue in CsvInputValues){
	 var ruleInputData = new List<string>();
	 foreach(var field in csvInputValue){
	    ruleInputData.Add($"{field.Key} = {field.Value}");
	 }
	 var tempRuleInputData = string.Join(",",ruleInputData);
	 finalInputRuleData.Add($"new RuleInputData {{ {tempRuleInputData} }}");
	 }
   #>

   List<RuleInputData> inputParameters = new List<RuleInputData>{
       <#= string.Join(",",finalInputRuleData) #>
   };

   public List<RuleOutputData> Compute() {
       foreach(var inputData in inputParameters){
	      RuleOutputData res = ComputeRules(inputData);
	      outputData.Add(res);
	   }
	   return outputData;
   }


   private RuleOutputData ComputeRules(RuleInputData ruleInputData){
         <#=  RuleDefination	#>
   }

}
}